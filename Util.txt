import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Util {

    public static boolean validaDefensores(String[] dfsr) {
        if (dfsr[0] == null || dfsr[0].length() == 0) {
            return false;
        }
        if (formataInteiro(dfsr[1]) == null || formataInteiro(dfsr[1]).length() == 0) {
            return false;
        }
        if (formataInteiro(dfsr[2]) == null || formataInteiro(dfsr[2]).length() == 0) {
            return false;
        }
        if (dfsr[3] == null || dfsr[3].length() == 0) {
            return false;
        }
        String[] no = dfsr[3].split(";");
        for (int i = 0; i < no.length; i++) {
            if (no[i] == null || no[i].length() == 0) {
                return false;
            }
        }
        if (dfsr[4] == null || dfsr[4].length() == 0) {
            return false;
        }
        if (formataInteiro(dfsr[4]) == null || formataInteiro(dfsr[4]).length() == 0) {
            return false;
        }
        if (dfsr[5] == null || dfsr[5].length() == 0) {
            return false;
        }
        String[] id_produtos = dfsr[6].split(";");
        for (int i = 0; i < id_produtos.length; i++) {
            if (formataInteiro(id_produtos[i]) == null || formataInteiro(id_produtos[i]).length() == 0) {
                return false;
            }
        }
        String[] id_qtdd = dfsr[7].split(";");
        for (int i = 0; i < id_qtdd.length; i++) {
            if (formataDecimal(id_qtdd[i]) == null || formataDecimal(id_qtdd[i]).length() == 0) {
                return false;
            }
        }
        if (formataDecimal(dfsr[8]) == null || formataDecimal(dfsr[8]).length() == 0) {
            return false;
        }
        if (formataData(dfsr[9]) == null || formataData(dfsr[9]).length() == 0) {
            return false;
        }
        return true;
    }

    public static double[] StringToDoubleArray(String string, String split) {
        String[] str = string.split(split);
        double[] vet = new double[str.length];
        for (int i = 0; i < vet.length; i++) {
            vet[i] = Double.parseDouble(formataDecimal(str[i].trim()));
        }
        return vet;
    }

    public static int[] StringToIntArray(String string, String split) {
        String[] str = string.split(split);
        int[] vet = new int[str.length];
        for (int i = 0; i < vet.length; i++) {
            vet[i] = Integer.parseInt(formataInteiro(str[i].trim()));
        }
        return vet;
    }

    public static String DoubleArrayToString(double[] array, String split) {
        String str = "";
        for (int i = 0; i < array.length; i++) {
            str += String.valueOf(array[i]) + split;
        }
        return str.substring(0, (str.length() - split.length()));
    }

    public static String IntArrayToString(int[] array, String split) {
        String str = "";
        for (int i = 0; i < array.length; i++) {
            str += String.valueOf(array[i]) + split;
        }
        return str.substring(0, (str.length() - split.length()));
    }

    public static String StringArrayToString(String[] array, String split) {
        String str = "";
        for (int i = 0; i < array.length; i++) {
            str += array[i].trim() + split;
        }
        return str.substring(0, (str.length() - split.length()));
    }

    public static String[] StringToStringArray(String string, String split) {
        String[] str = string.split(split);
        String[] vet = new String[str.length];
        for (int i = 0; i < vet.length; i++) {
            vet[i] = str[i].trim();
        }
        return vet;
    }

    public static String formataInteiro(String in) {
        if (in == null || in.length() == 0) {
            return in;
        }
        char[] vin = in.toCharArray();
        char[] vout = new char[vin.length];
        char[] nums = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        int i2 = 0;
        for (int i = 0; i < vin.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (vin[i] == nums[j]) {
                    vout[i2] = vin[i];
                    i2++;
                    break;
                }
            }
        }
        char[] vs = new char[i2];
        for (int i = 0; i < vs.length; i++) {
            vs[i] = vout[i];
        }
        return new String(vs);
    }

    public static String formataDecimal(String in) {
        if (in == null || in.length() == 0) {
            return in;
        }
        in = in.replaceAll(",", ".");
        if (in.contains(".")) {
            String[] vin = split(in, '.');
            return formataInteiro(vin[0]) + "." + formataInteiro(vin[1]);
        }
        return formataInteiro(in);
    }

    public static String formataData(String in) {
        in = formataInteiro(in);
        if (in == null || in.length() == 0) {
            return in;
        }
        if (in.length() == 1) {
            return in;
        }
        if (in.length() == 2) {
            return in + "/";
        }
        if (in.length() == 3) {
            return in.substring(0, 2) + "/" + in.substring(2, 3);
        }
        if (in.length() == 4) {
            return in.substring(0, 2) + "/" + in.substring(2, 4) + "/";
        }
        if (in.length() == 5) {
            return in.substring(0, 2) + "/" + in.substring(2, 4) + "/" + in.substring(4, 5);
        }
        if (in.length() == 6) {
            return in.substring(0, 2) + "/" + in.substring(2, 4) + "/" + in.substring(4, 6);
        }
        if (in.length() == 7) {
            return in.substring(0, 2) + "/" + in.substring(2, 4) + "/" + in.substring(4, 7);
        } else {
            return in.substring(0, 2) + "/" + in.substring(2, 4) + "/" + in.substring(4, 8);
        }
    }

    public static String[] split(String in, char c) {
        ArrayList<String> al = new ArrayList();
        for (int i = 0, j = 0; i < in.length(); i++) {
            if (in.charAt(i) == c) {
                al.add(in.substring(j, i));
                j = i + 1;
            } else if (i == in.length() - 1) {
                al.add(in.substring(j, i + 1));
            }
        }
        String[] out = new String[al.size()];
        for (int i = 0; i < out.length; i++) {
            out[i] = al.get(i);
        }
        return out;
    }

    public static PreparedStatement setValues(Connection conn, String sql, Object bean) {
        Method[] methods = bean.getClass().getDeclaredMethods();
        ArrayList<Method> al = new ArrayList();
        for (int i = 0; i < methods.length; i++) {
            if (methods[i].getName().toLowerCase().contains("get")) {
                al.add(methods[i]);
            }
        }
        Object[] data = new Object[al.size()];
        for (int i = 0; i < data.length; i++) {
            try {
                data[i] = al.get(i).invoke(bean);
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
                Logger.getLogger(Util.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            PreparedStatement ps = conn.prepareStatement(sql);
            for (int i = 0, i2 = 1; i < data.length; i++) {
                if(data[i] == null){
                    continue;
                }
                String type = data[i].getClass().getName();
                switch (type) {
                    case "java.lang.String":
                        ps.setString((i2), (String) data[i]);
                        break;
                    case "java.lang.Char":
                        ps.setString((i2), ((Character) data[i]) + "");
                        break;
                    case "java.lang.Boolean":
                        ps.setBoolean((i2), (Boolean) data[i]);
                        break;
                    case "java.lang.Long":
                        ps.setLong((i2), (Long) data[i]);
                        break;
                    case "java.lang.Integer":
                        ps.setInt((i2), (Integer) data[i]);
                        break;
                    case "java.lang.Short":
                        ps.setShort((i2), (Short) data[i]);
                        break;
                    case "java.lang.Byte":
                        ps.setByte((i2), (Byte) data[i]);
                        break;
                    case "java.math.BigDecimal":
                        ps.setBigDecimal((i2), (BigDecimal) data[i]);
                        break;
                    case "java.lang.Double":
                        ps.setDouble((i2), (Double) data[i]);
                        break;
                    case "java.lang.Float":
                        ps.setFloat((i2), (Float) data[i]);
                        break;
                    case "java.time.LocalDate":
                        ps.setDate((i2), Date.valueOf((LocalDate) data[i]));
                        break;
                    case "java.time.LocalTime":
                        ps.setTime((i2), Time.valueOf((LocalTime) data[i]));
                        break;
                    case "java.time.LocalDateTime":
                        ps.setTimestamp((i2), Timestamp.valueOf((LocalDateTime) data[i]));
                        break;
                }
                i2++;
            }
            return ps;
        } catch (SQLException ex) {
            Logger.getLogger(Util.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    public static Object[][] getValues(ResultSet rs) throws SQLException {
        int cq = rs.getMetaData().getColumnCount();
        ArrayList[] al = new ArrayList[cq];
        while (rs.next()) {
            for (int i = 1; i <= cq; i++) {
                if (al[i - 1] == null) {
                    al[i - 1] = new ArrayList();
                }
                al[i - 1].add(rs.getObject(i));
            }
        }
        if (al[0] == null) {
            return null;
        }
        Object[][] vo = new Object[al[0].size()][cq];
        for (int i = 0; i < al[0].size(); i++) {
            for (int j = 1; j < cq; j++) {
                if(al[j].get(i) instanceof Date){
                    vo[i][j] = ((Date) al[j].get(i)).toLocalDate();
                    continue;
                }
                else if(al[j].get(i) instanceof Time){
                    vo[i][j] = ((Time) al[j].get(i)).toLocalTime();
                    continue;
                }
                else if(al[j].get(i) instanceof Timestamp){
                    vo[i][j] = ((Timestamp) al[j].get(i)).toLocalDateTime();
                    continue;
                }
                vo[i][j] = al[j].get(i);
            }
        }
        return vo;
    }

}